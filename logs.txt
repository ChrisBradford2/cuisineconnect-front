* 
* ==> Audit <==
* |---------|-----------------|----------|-------------------|---------|----------------------|----------------------|
| Command |      Args       | Profile  |       User        | Version |      Start Time      |       End Time       |
|---------|-----------------|----------|-------------------|---------|----------------------|----------------------|
| start   | --driver=docker | minikube | nicolas.barbarisi | v1.30.1 | 05 Jul 23 18:18 CEST | 05 Jul 23 18:21 CEST |
| service | demo-react-app  | minikube | nicolas.barbarisi | v1.30.1 | 05 Jul 23 18:23 CEST | 05 Jul 23 18:23 CEST |
| stop    |                 | minikube | nicolas.barbarisi | v1.30.1 | 05 Jul 23 18:29 CEST |                      |
|---------|-----------------|----------|-------------------|---------|----------------------|----------------------|

* 
* ==> Last Start <==
* Log file created at: 2023/07/05 18:18:54
Running on machine: MacBook-Pro-de-Nicolas
Binary: Built with gc go1.20.2 for darwin/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0705 18:18:54.307927   70248 out.go:296] Setting OutFile to fd 1 ...
I0705 18:18:54.308947   70248 out.go:348] isatty.IsTerminal(1) = true
I0705 18:18:54.308956   70248 out.go:309] Setting ErrFile to fd 2...
I0705 18:18:54.308961   70248 out.go:348] isatty.IsTerminal(2) = true
I0705 18:18:54.309108   70248 root.go:336] Updating PATH: /Users/nicolas.barbarisi/.minikube/bin
W0705 18:18:54.309286   70248 root.go:312] Error reading config file at /Users/nicolas.barbarisi/.minikube/config/config.json: open /Users/nicolas.barbarisi/.minikube/config/config.json: no such file or directory
I0705 18:18:54.312073   70248 out.go:303] Setting JSON to false
I0705 18:18:54.358184   70248 start.go:125] hostinfo: {"hostname":"MacBook-Pro-de-Nicolas.local","uptime":119143,"bootTime":1688454791,"procs":676,"os":"darwin","platform":"darwin","platformFamily":"Standalone Workstation","platformVersion":"13.4.1","kernelVersion":"22.5.0","kernelArch":"x86_64","virtualizationSystem":"","virtualizationRole":"","hostId":"e4ac488a-a6ec-5558-94c4-57c1be542b8c"}
W0705 18:18:54.358301   70248 start.go:133] gopshost.Virtualization returned error: not implemented yet
I0705 18:18:54.363557   70248 out.go:177] 😄  minikube v1.30.1 on Darwin 13.4.1
W0705 18:18:54.374826   70248 preload.go:295] Failed to list preload files: open /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball: no such file or directory
I0705 18:18:54.374826   70248 notify.go:220] Checking for updates...
I0705 18:18:54.375226   70248 driver.go:375] Setting default libvirt URI to qemu:///system
I0705 18:18:54.833393   70248 docker.go:121] docker version: linux-20.10.12:Docker Desktop 4.5.0 (74594)
I0705 18:18:54.833542   70248 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0705 18:18:55.713206   70248 info.go:266] docker info: {ID:OL3Q:RSTO:SOJS:4F6X:OTPV:3ZQY:YBPJ:3COK:77SD:WFJE:WGLK:A3PF Containers:78 ContainersRunning:20 ContainersPaused:0 ContainersStopped:58 Images:120 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:true NFd:196 OomKillDisable:false NGoroutines:175 SystemTime:2023-07-05 16:18:55.0519519 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:5 KernelVersion:5.10.76-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:5 MemTotal:4647448576 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[] ExperimentalBuild:true ServerVersion:20.10.12 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:7b11cfaabd73bb80907dd23182b9347b4245eb5d Expected:7b11cfaabd73bb80907dd23182b9347b4245eb5d} RuncCommit:{ID:v1.0.2-0-g52b36a2 Expected:v1.0.2-0-g52b36a2} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=default name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/local/lib/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.7.1] map[Name:compose Path:/usr/local/lib/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.2.3] map[Name:scan Path:/usr/local/lib/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.17.0]] Warnings:<nil>}}
I0705 18:18:55.735314   70248 out.go:177] ✨  Using the docker driver based on user configuration
I0705 18:18:55.751618   70248 start.go:295] selected driver: docker
I0705 18:18:55.751636   70248 start.go:870] validating driver "docker" against <nil>
I0705 18:18:55.751653   70248 start.go:881] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0705 18:18:55.751970   70248 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0705 18:18:56.066732   70248 info.go:266] docker info: {ID:OL3Q:RSTO:SOJS:4F6X:OTPV:3ZQY:YBPJ:3COK:77SD:WFJE:WGLK:A3PF Containers:78 ContainersRunning:20 ContainersPaused:0 ContainersStopped:58 Images:120 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:true NFd:196 OomKillDisable:false NGoroutines:175 SystemTime:2023-07-05 16:18:55.9715361 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:5 KernelVersion:5.10.76-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:5 MemTotal:4647448576 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[] ExperimentalBuild:true ServerVersion:20.10.12 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:7b11cfaabd73bb80907dd23182b9347b4245eb5d Expected:7b11cfaabd73bb80907dd23182b9347b4245eb5d} RuncCommit:{ID:v1.0.2-0-g52b36a2 Expected:v1.0.2-0-g52b36a2} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=default name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/local/lib/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.7.1] map[Name:compose Path:/usr/local/lib/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.2.3] map[Name:scan Path:/usr/local/lib/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.17.0]] Warnings:<nil>}}
I0705 18:18:56.066847   70248 start_flags.go:305] no existing cluster config was found, will generate one from the flags 
I0705 18:18:56.067919   70248 start_flags.go:386] Using suggested 4000MB memory alloc based on sys=16384MB, container=4432MB
I0705 18:18:56.068864   70248 start_flags.go:901] Wait components to verify : map[apiserver:true system_pods:true]
I0705 18:18:56.083232   70248 out.go:177] 📌  Using Docker Desktop driver with root privileges
I0705 18:18:56.091795   70248 cni.go:84] Creating CNI manager for ""
I0705 18:18:56.091832   70248 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0705 18:18:56.091845   70248 start_flags.go:314] Found "bridge CNI" CNI - setting NetworkPlugin=cni
I0705 18:18:56.091864   70248 start_flags.go:319] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:4000 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0705 18:18:56.103172   70248 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I0705 18:18:56.110837   70248 cache.go:120] Beginning downloading kic base image for docker with docker
I0705 18:18:56.116312   70248 out.go:177] 🚜  Pulling base image ...
I0705 18:18:56.122073   70248 preload.go:132] Checking if preload exists for k8s version v1.26.3 and runtime docker
I0705 18:18:56.122140   70248 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 in local docker daemon
I0705 18:18:56.404012   70248 cache.go:148] Downloading gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 to local cache
I0705 18:18:56.404322   70248 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 in local cache directory
I0705 18:18:56.404524   70248 image.go:118] Writing gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 to local cache
I0705 18:18:56.955162   70248 preload.go:119] Found remote preload: https://storage.googleapis.com/minikube-preloaded-volume-tarballs/v18/v1.26.3/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4
I0705 18:18:56.955180   70248 cache.go:57] Caching tarball of preloaded images
I0705 18:18:56.955581   70248 preload.go:132] Checking if preload exists for k8s version v1.26.3 and runtime docker
I0705 18:18:56.960222   70248 out.go:177] 💾  Downloading Kubernetes v1.26.3 preload ...
I0705 18:18:56.982898   70248 preload.go:238] getting checksum for preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4 ...
I0705 18:18:57.111332   70248 download.go:107] Downloading: https://storage.googleapis.com/minikube-preloaded-volume-tarballs/v18/v1.26.3/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4?checksum=md5:b698631b54adb014b111f0258a79e081 -> /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4
I0705 18:19:17.078751   70248 preload.go:249] saving checksum for preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4 ...
I0705 18:19:17.078972   70248 preload.go:256] verifying checksum of /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4 ...
I0705 18:19:17.934447   70248 cache.go:60] Finished verifying existence of preloaded tar for  v1.26.3 on docker
I0705 18:19:17.934923   70248 profile.go:148] Saving config to /Users/nicolas.barbarisi/.minikube/profiles/minikube/config.json ...
I0705 18:19:17.934988   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/config.json: {Name:mk1e492b5f172a54a1ce66512dd7cdc2500dd635 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:19:34.419371   70248 cache.go:151] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 as a tarball
I0705 18:19:34.419389   70248 cache.go:161] Loading gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 from local cache
I0705 18:20:13.789101   70248 cache.go:163] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 from cached tarball
I0705 18:20:13.789167   70248 cache.go:193] Successfully downloaded all kic artifacts
I0705 18:20:13.789217   70248 start.go:364] acquiring machines lock for minikube: {Name:mka71846a4406cfb4879dad2c7f1a40e49055c60 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0705 18:20:13.789570   70248 start.go:368] acquired machines lock for "minikube" in 335.34µs
I0705 18:20:13.789619   70248 start.go:93] Provisioning new machine with config: &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:4000 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:} &{Name: IP: Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}
I0705 18:20:13.789774   70248 start.go:125] createHost starting for "" (driver="docker")
I0705 18:20:13.821401   70248 out.go:204] 🔥  Creating docker container (CPUs=2, Memory=4000MB) ...
I0705 18:20:13.821998   70248 start.go:159] libmachine.API.Create for "minikube" (driver="docker")
I0705 18:20:13.822041   70248 client.go:168] LocalClient.Create starting
I0705 18:20:13.822383   70248 main.go:141] libmachine: Creating CA: /Users/nicolas.barbarisi/.minikube/certs/ca.pem
I0705 18:20:14.003425   70248 main.go:141] libmachine: Creating client certificate: /Users/nicolas.barbarisi/.minikube/certs/cert.pem
I0705 18:20:14.170061   70248 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0705 18:20:14.434167   70248 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0705 18:20:14.434432   70248 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I0705 18:20:14.434452   70248 cli_runner.go:164] Run: docker network inspect minikube
W0705 18:20:14.706413   70248 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I0705 18:20:14.706441   70248 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error: No such network: minikube
I0705 18:20:14.706454   70248 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error: No such network: minikube

** /stderr **
I0705 18:20:14.706584   70248 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0705 18:20:15.246629   70248 network.go:209] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0xc01b859d70}
I0705 18:20:15.246670   70248 network_create.go:123] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0705 18:20:15.246770   70248 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube
I0705 18:20:15.607920   70248 network_create.go:107] docker network minikube 192.168.49.0/24 created
I0705 18:20:15.607947   70248 kic.go:117] calculated static IP "192.168.49.2" for the "minikube" container
I0705 18:20:15.608119   70248 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0705 18:20:15.948336   70248 cli_runner.go:164] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0705 18:20:16.212649   70248 oci.go:103] Successfully created a docker volume minikube
I0705 18:20:16.212830   70248 cli_runner.go:164] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -d /var/lib
I0705 18:20:19.497155   70248 cli_runner.go:217] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -d /var/lib: (3.284168482s)
I0705 18:20:19.497185   70248 oci.go:107] Successfully prepared a docker volume minikube
I0705 18:20:19.497222   70248 preload.go:132] Checking if preload exists for k8s version v1.26.3 and runtime docker
I0705 18:20:19.497254   70248 kic.go:190] Starting extracting preloaded images to volume ...
I0705 18:20:19.497533   70248 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -I lz4 -xf /preloaded.tar -C /extractDir
W0705 18:20:20.490999   70248 cli_runner.go:211] docker run --rm --entrypoint /usr/bin/tar -v /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -I lz4 -xf /preloaded.tar -C /extractDir returned with exit code 125
I0705 18:20:20.491057   70248 kic.go:197] Unable to extract preloaded tarball to volume: docker run --rm --entrypoint /usr/bin/tar -v /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 -I lz4 -xf /preloaded.tar -C /extractDir: exit status 125
stdout:

stderr:
docker: Error response from daemon: Mounts denied: 
The path /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4 is not shared from the host and is not known to Docker.
You can configure shared paths from Docker -> Preferences... -> Resources -> File Sharing.
See https://docs.docker.com/desktop/mac for more info.
time="2023-07-05T18:20:20+02:00" level=error msg="error waiting for container: context canceled"
I0705 18:20:20.491281   70248 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0705 18:20:21.521826   70248 cli_runner.go:217] Completed: docker info --format "'{{json .SecurityOptions}}'": (1.03048697s)
I0705 18:20:21.522047   70248 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=4000mb --memory-swap=4000mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106
I0705 18:20:22.639465   70248 cli_runner.go:217] Completed: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=4000mb --memory-swap=4000mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106: (1.117309938s)
I0705 18:20:22.639711   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Running}}
I0705 18:20:23.018934   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0705 18:20:23.380918   70248 cli_runner.go:164] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0705 18:20:23.841627   70248 oci.go:144] the created container "minikube" has a running status.
I0705 18:20:23.841654   70248 kic.go:221] Creating ssh key for kic: /Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa...
I0705 18:20:24.160516   70248 kic_runner.go:191] docker (temp): /Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0705 18:20:24.562617   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0705 18:20:24.820297   70248 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0705 18:20:24.820313   70248 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0705 18:20:25.237846   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0705 18:20:25.527645   70248 machine.go:88] provisioning docker machine ...
I0705 18:20:25.527704   70248 ubuntu.go:169] provisioning hostname "minikube"
I0705 18:20:25.527857   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:25.807707   70248 main.go:141] libmachine: Using SSH client type: native
I0705 18:20:25.810751   70248 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x100411900] 0x1004149a0 <nil>  [] 0s} 127.0.0.1 52473 <nil> <nil>}
I0705 18:20:25.810767   70248 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0705 18:20:26.140975   70248 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0705 18:20:26.141101   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:26.405495   70248 main.go:141] libmachine: Using SSH client type: native
I0705 18:20:26.406033   70248 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x100411900] 0x1004149a0 <nil>  [] 0s} 127.0.0.1 52473 <nil> <nil>}
I0705 18:20:26.406050   70248 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0705 18:20:26.562599   70248 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0705 18:20:26.562622   70248 ubuntu.go:175] set auth options {CertDir:/Users/nicolas.barbarisi/.minikube CaCertPath:/Users/nicolas.barbarisi/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/nicolas.barbarisi/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/nicolas.barbarisi/.minikube/machines/server.pem ServerKeyPath:/Users/nicolas.barbarisi/.minikube/machines/server-key.pem ClientKeyPath:/Users/nicolas.barbarisi/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/nicolas.barbarisi/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/nicolas.barbarisi/.minikube}
I0705 18:20:26.562644   70248 ubuntu.go:177] setting up certificates
I0705 18:20:26.562651   70248 provision.go:83] configureAuth start
I0705 18:20:26.562751   70248 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0705 18:20:26.797428   70248 provision.go:138] copyHostCerts
I0705 18:20:26.798039   70248 exec_runner.go:151] cp: /Users/nicolas.barbarisi/.minikube/certs/cert.pem --> /Users/nicolas.barbarisi/.minikube/cert.pem (1151 bytes)
I0705 18:20:26.798894   70248 exec_runner.go:151] cp: /Users/nicolas.barbarisi/.minikube/certs/key.pem --> /Users/nicolas.barbarisi/.minikube/key.pem (1679 bytes)
I0705 18:20:26.799319   70248 exec_runner.go:151] cp: /Users/nicolas.barbarisi/.minikube/certs/ca.pem --> /Users/nicolas.barbarisi/.minikube/ca.pem (1107 bytes)
I0705 18:20:26.799594   70248 provision.go:112] generating server cert: /Users/nicolas.barbarisi/.minikube/machines/server.pem ca-key=/Users/nicolas.barbarisi/.minikube/certs/ca.pem private-key=/Users/nicolas.barbarisi/.minikube/certs/ca-key.pem org=nicolas.barbarisi.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0705 18:20:27.057945   70248 provision.go:172] copyRemoteCerts
I0705 18:20:27.058086   70248 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0705 18:20:27.058150   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:27.283609   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:20:27.391303   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/machines/server.pem --> /etc/docker/server.pem (1229 bytes)
I0705 18:20:27.426223   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0705 18:20:27.455913   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1107 bytes)
I0705 18:20:27.486939   70248 provision.go:86] duration metric: configureAuth took 924.25609ms
I0705 18:20:27.486960   70248 ubuntu.go:193] setting minikube options for container-runtime
I0705 18:20:27.492211   70248 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.26.3
I0705 18:20:27.492328   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:27.708953   70248 main.go:141] libmachine: Using SSH client type: native
I0705 18:20:27.709555   70248 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x100411900] 0x1004149a0 <nil>  [] 0s} 127.0.0.1 52473 <nil> <nil>}
I0705 18:20:27.709564   70248 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0705 18:20:27.858317   70248 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0705 18:20:27.858331   70248 ubuntu.go:71] root file system type: overlay
I0705 18:20:27.858436   70248 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0705 18:20:27.858568   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:28.115401   70248 main.go:141] libmachine: Using SSH client type: native
I0705 18:20:28.116046   70248 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x100411900] 0x1004149a0 <nil>  [] 0s} 127.0.0.1 52473 <nil> <nil>}
I0705 18:20:28.116116   70248 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0705 18:20:28.280878   70248 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0705 18:20:28.281044   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:28.518443   70248 main.go:141] libmachine: Using SSH client type: native
I0705 18:20:28.519498   70248 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x100411900] 0x1004149a0 <nil>  [] 0s} 127.0.0.1 52473 <nil> <nil>}
I0705 18:20:28.519512   70248 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0705 18:20:29.493196   70248 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2023-03-27 16:16:18.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2023-07-05 16:20:28.296798000 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0705 18:20:29.493230   70248 machine.go:91] provisioned docker machine in 3.965522952s
I0705 18:20:29.493237   70248 client.go:171] LocalClient.Create took 15.671019049s
I0705 18:20:29.493267   70248 start.go:167] duration metric: libmachine.API.Create for "minikube" took 15.67109593s
I0705 18:20:29.493273   70248 start.go:300] post-start starting for "minikube" (driver="docker")
I0705 18:20:29.493279   70248 start.go:328] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0705 18:20:29.493415   70248 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0705 18:20:29.493539   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:29.721930   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:20:29.840938   70248 ssh_runner.go:195] Run: cat /etc/os-release
I0705 18:20:29.851928   70248 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0705 18:20:29.851946   70248 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0705 18:20:29.851953   70248 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0705 18:20:29.851957   70248 info.go:137] Remote host: Ubuntu 20.04.5 LTS
I0705 18:20:29.851969   70248 filesync.go:126] Scanning /Users/nicolas.barbarisi/.minikube/addons for local assets ...
I0705 18:20:29.852256   70248 filesync.go:126] Scanning /Users/nicolas.barbarisi/.minikube/files for local assets ...
I0705 18:20:29.852496   70248 start.go:303] post-start completed in 359.21065ms
I0705 18:20:29.853991   70248 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0705 18:20:30.087585   70248 profile.go:148] Saving config to /Users/nicolas.barbarisi/.minikube/profiles/minikube/config.json ...
I0705 18:20:30.089620   70248 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0705 18:20:30.089717   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:30.325468   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:20:30.428931   70248 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0705 18:20:30.438524   70248 start.go:128] duration metric: createHost completed in 16.648520704s
I0705 18:20:30.438547   70248 start.go:83] releasing machines lock for "minikube", held for 16.648784761s
I0705 18:20:30.438763   70248 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0705 18:20:30.666726   70248 ssh_runner.go:195] Run: cat /version.json
I0705 18:20:30.666787   70248 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0705 18:20:30.666834   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:30.666911   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:20:30.923523   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:20:30.923564   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:20:31.727516   70248 ssh_runner.go:235] Completed: cat /version.json: (1.060752047s)
I0705 18:20:31.727548   70248 ssh_runner.go:235] Completed: curl -sS -m 2 https://registry.k8s.io/: (1.06073159s)
I0705 18:20:31.728393   70248 ssh_runner.go:195] Run: systemctl --version
I0705 18:20:31.737302   70248 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0705 18:20:31.745735   70248 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0705 18:20:31.776523   70248 cni.go:229] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0705 18:20:31.776662   70248 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0705 18:20:31.802601   70248 cni.go:261] disabled [/etc/cni/net.d/100-crio-bridge.conf] bridge cni config(s)
I0705 18:20:31.802626   70248 start.go:481] detecting cgroup driver to use...
I0705 18:20:31.802642   70248 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0705 18:20:31.802773   70248 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0705 18:20:31.824958   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0705 18:20:31.839765   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0705 18:20:31.853756   70248 containerd.go:145] configuring containerd to use "cgroupfs" as cgroup driver...
I0705 18:20:31.853877   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0705 18:20:31.869403   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0705 18:20:31.888604   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0705 18:20:31.902808   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0705 18:20:31.919270   70248 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0705 18:20:31.934203   70248 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0705 18:20:31.947569   70248 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0705 18:20:31.958994   70248 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0705 18:20:31.970396   70248 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0705 18:20:32.076516   70248 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0705 18:20:32.209495   70248 start.go:481] detecting cgroup driver to use...
I0705 18:20:32.209513   70248 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0705 18:20:32.209688   70248 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0705 18:20:32.245532   70248 cruntime.go:276] skipping containerd shutdown because we are bound to it
I0705 18:20:32.245665   70248 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0705 18:20:32.262774   70248 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0705 18:20:32.285640   70248 ssh_runner.go:195] Run: which cri-dockerd
I0705 18:20:32.294338   70248 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0705 18:20:32.312633   70248 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0705 18:20:32.337378   70248 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0705 18:20:32.486490   70248 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0705 18:20:32.597348   70248 docker.go:538] configuring docker to use "cgroupfs" as cgroup driver...
I0705 18:20:32.597381   70248 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (144 bytes)
I0705 18:20:32.623721   70248 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0705 18:20:32.760151   70248 ssh_runner.go:195] Run: sudo systemctl restart docker
I0705 18:20:33.127664   70248 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0705 18:20:33.229654   70248 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0705 18:20:33.335936   70248 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0705 18:20:33.435756   70248 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0705 18:20:33.526234   70248 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0705 18:20:33.544666   70248 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0705 18:20:33.637792   70248 ssh_runner.go:195] Run: sudo systemctl restart cri-docker
I0705 18:20:33.765092   70248 start.go:528] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0705 18:20:33.765747   70248 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0705 18:20:33.774457   70248 start.go:549] Will wait 60s for crictl version
I0705 18:20:33.774610   70248 ssh_runner.go:195] Run: which crictl
I0705 18:20:33.781815   70248 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0705 18:20:33.830897   70248 start.go:565] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  23.0.2
RuntimeApiVersion:  v1alpha2
I0705 18:20:33.831022   70248 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0705 18:20:33.879062   70248 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0705 18:20:33.943819   70248 out.go:204] 🐳  Preparing Kubernetes v1.26.3 on Docker 23.0.2 ...
I0705 18:20:33.943975   70248 cli_runner.go:164] Run: docker exec -t minikube dig +short host.docker.internal
I0705 18:20:34.326912   70248 network.go:96] got host ip for mount in container by digging dns: 192.168.65.2
I0705 18:20:34.327570   70248 ssh_runner.go:195] Run: grep 192.168.65.2	host.minikube.internal$ /etc/hosts
I0705 18:20:34.334844   70248 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.65.2	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0705 18:20:34.356408   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0705 18:20:34.580073   70248 preload.go:132] Checking if preload exists for k8s version v1.26.3 and runtime docker
I0705 18:20:34.580181   70248 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0705 18:20:34.608129   70248 docker.go:639] Got preloaded images: 
I0705 18:20:34.608138   70248 docker.go:645] registry.k8s.io/kube-apiserver:v1.26.3 wasn't preloaded
I0705 18:20:34.608253   70248 ssh_runner.go:195] Run: sudo cat /var/lib/docker/image/overlay2/repositories.json
I0705 18:20:34.621481   70248 ssh_runner.go:195] Run: which lz4
I0705 18:20:34.628083   70248 ssh_runner.go:195] Run: stat -c "%!s(MISSING) %!y(MISSING)" /preloaded.tar.lz4
I0705 18:20:34.634003   70248 ssh_runner.go:352] existence check for /preloaded.tar.lz4: stat -c "%!s(MISSING) %!y(MISSING)" /preloaded.tar.lz4: Process exited with status 1
stdout:

stderr:
stat: cannot stat '/preloaded.tar.lz4': No such file or directory
I0705 18:20:34.634058   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4 --> /preloaded.tar.lz4 (416308310 bytes)
I0705 18:20:50.159316   70248 docker.go:603] Took 15.531206 seconds to copy over tarball
I0705 18:20:50.159993   70248 ssh_runner.go:195] Run: sudo tar -I lz4 -C /var -xf /preloaded.tar.lz4
I0705 18:20:59.208580   70248 ssh_runner.go:235] Completed: sudo tar -I lz4 -C /var -xf /preloaded.tar.lz4: (9.048449251s)
I0705 18:20:59.208595   70248 ssh_runner.go:146] rm: /preloaded.tar.lz4
I0705 18:20:59.705182   70248 ssh_runner.go:195] Run: sudo cat /var/lib/docker/image/overlay2/repositories.json
I0705 18:20:59.717694   70248 ssh_runner.go:362] scp memory --> /var/lib/docker/image/overlay2/repositories.json (2628 bytes)
I0705 18:20:59.745539   70248 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0705 18:20:59.861116   70248 ssh_runner.go:195] Run: sudo systemctl restart docker
I0705 18:21:01.693577   70248 ssh_runner.go:235] Completed: sudo systemctl restart docker: (1.832421574s)
I0705 18:21:01.693765   70248 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0705 18:21:01.745900   70248 docker.go:639] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.26.3
registry.k8s.io/kube-controller-manager:v1.26.3
registry.k8s.io/kube-scheduler:v1.26.3
registry.k8s.io/kube-proxy:v1.26.3
registry.k8s.io/etcd:3.5.6-0
registry.k8s.io/pause:3.9
registry.k8s.io/coredns/coredns:v1.9.3
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0705 18:21:01.745929   70248 cache_images.go:84] Images are preloaded, skipping loading
I0705 18:21:01.746028   70248 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0705 18:21:01.787231   70248 cni.go:84] Creating CNI manager for ""
I0705 18:21:01.787247   70248 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0705 18:21:01.787270   70248 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0705 18:21:01.787285   70248 kubeadm.go:172] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.26.3 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[hairpinMode:hairpin-veth runtimeRequestTimeout:15m]}
I0705 18:21:01.787459   70248 kubeadm.go:177] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.26.3
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0705 18:21:01.787580   70248 kubeadm.go:968] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.26.3/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0705 18:21:01.787740   70248 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.26.3
I0705 18:21:01.799630   70248 binaries.go:44] Found k8s binaries, skipping transfer
I0705 18:21:01.799812   70248 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0705 18:21:01.813674   70248 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (369 bytes)
I0705 18:21:01.836763   70248 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0705 18:21:01.864357   70248 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2084 bytes)
I0705 18:21:01.887855   70248 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0705 18:21:01.894896   70248 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0705 18:21:01.912996   70248 certs.go:56] Setting up /Users/nicolas.barbarisi/.minikube/profiles/minikube for IP: 192.168.49.2
I0705 18:21:01.913028   70248 certs.go:186] acquiring lock for shared ca certs: {Name:mk777d6d770bd6e1a47024df508b2d3c57db0d1e Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:01.914193   70248 certs.go:200] generating minikubeCA CA: /Users/nicolas.barbarisi/.minikube/ca.key
I0705 18:21:02.197695   70248 crypto.go:156] Writing cert to /Users/nicolas.barbarisi/.minikube/ca.crt ...
I0705 18:21:02.197705   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/ca.crt: {Name:mk52784f3b03e727fda4bcd0bbaa8bd0f7671584 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.213080   70248 crypto.go:164] Writing key to /Users/nicolas.barbarisi/.minikube/ca.key ...
I0705 18:21:02.213119   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/ca.key: {Name:mk753b8e6f5e60ab36f723cda5db6722aaa6db95 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.213512   70248 certs.go:200] generating proxyClientCA CA: /Users/nicolas.barbarisi/.minikube/proxy-client-ca.key
I0705 18:21:02.427316   70248 crypto.go:156] Writing cert to /Users/nicolas.barbarisi/.minikube/proxy-client-ca.crt ...
I0705 18:21:02.427326   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/proxy-client-ca.crt: {Name:mk7426fda7b3edf037b14d44934c092e798002df Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.428292   70248 crypto.go:164] Writing key to /Users/nicolas.barbarisi/.minikube/proxy-client-ca.key ...
I0705 18:21:02.428299   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/proxy-client-ca.key: {Name:mkda56f922bf9fe2dc39d7d2b5a8ca33ce38b897 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.428666   70248 certs.go:315] generating minikube-user signed cert: /Users/nicolas.barbarisi/.minikube/profiles/minikube/client.key
I0705 18:21:02.428679   70248 crypto.go:68] Generating cert /Users/nicolas.barbarisi/.minikube/profiles/minikube/client.crt with IP's: []
I0705 18:21:02.651170   70248 crypto.go:156] Writing cert to /Users/nicolas.barbarisi/.minikube/profiles/minikube/client.crt ...
I0705 18:21:02.651181   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/client.crt: {Name:mke185a62a5cf519241124aa5c79688391ada33c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.651651   70248 crypto.go:164] Writing key to /Users/nicolas.barbarisi/.minikube/profiles/minikube/client.key ...
I0705 18:21:02.651657   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/client.key: {Name:mk7b8fa75cf97df0671127580846855512dff9ad Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.651942   70248 certs.go:315] generating minikube signed cert: /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0705 18:21:02.651965   70248 crypto.go:68] Generating cert /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 with IP's: [192.168.49.2 10.96.0.1 127.0.0.1 10.0.0.1]
I0705 18:21:02.934595   70248 crypto.go:156] Writing cert to /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 ...
I0705 18:21:02.934606   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2: {Name:mk3abac8e5b23fd428b0e0e47959be5bc6ba1c7e Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.935070   70248 crypto.go:164] Writing key to /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 ...
I0705 18:21:02.935076   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.key.dd3b5fb2: {Name:mk996b940a3e9505a132e012f1d9c5440a4af433 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:02.935375   70248 certs.go:333] copying /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 -> /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.crt
I0705 18:21:02.938010   70248 certs.go:337] copying /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 -> /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.key
I0705 18:21:02.938873   70248 certs.go:315] generating aggregator signed cert: /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.key
I0705 18:21:02.938904   70248 crypto.go:68] Generating cert /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.crt with IP's: []
I0705 18:21:03.035061   70248 crypto.go:156] Writing cert to /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.crt ...
I0705 18:21:03.035077   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.crt: {Name:mk88aaf705c35543c15db912582b1f9ddb2eacf0 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:03.035562   70248 crypto.go:164] Writing key to /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.key ...
I0705 18:21:03.035567   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.key: {Name:mk0918c0d8197795694c5463dccff391cb5d3119 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:03.041936   70248 certs.go:401] found cert: /Users/nicolas.barbarisi/.minikube/certs/Users/nicolas.barbarisi/.minikube/certs/ca-key.pem (1679 bytes)
I0705 18:21:03.042331   70248 certs.go:401] found cert: /Users/nicolas.barbarisi/.minikube/certs/Users/nicolas.barbarisi/.minikube/certs/ca.pem (1107 bytes)
I0705 18:21:03.042761   70248 certs.go:401] found cert: /Users/nicolas.barbarisi/.minikube/certs/Users/nicolas.barbarisi/.minikube/certs/cert.pem (1151 bytes)
I0705 18:21:03.043150   70248 certs.go:401] found cert: /Users/nicolas.barbarisi/.minikube/certs/Users/nicolas.barbarisi/.minikube/certs/key.pem (1679 bytes)
I0705 18:21:03.044226   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0705 18:21:03.074120   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0705 18:21:03.101164   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0705 18:21:03.129518   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0705 18:21:03.156609   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0705 18:21:03.187494   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0705 18:21:03.214218   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0705 18:21:03.242746   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0705 18:21:03.268840   70248 ssh_runner.go:362] scp /Users/nicolas.barbarisi/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0705 18:21:03.295964   70248 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (740 bytes)
I0705 18:21:03.319462   70248 ssh_runner.go:195] Run: openssl version
I0705 18:21:03.335574   70248 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0705 18:21:03.359359   70248 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0705 18:21:03.366563   70248 certs.go:444] hashing: -rw-r--r-- 1 root root 1111 Jul  5 16:21 /usr/share/ca-certificates/minikubeCA.pem
I0705 18:21:03.366647   70248 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0705 18:21:03.376516   70248 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0705 18:21:03.388265   70248 kubeadm.go:401] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:4000 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0705 18:21:03.388434   70248 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0705 18:21:03.429415   70248 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0705 18:21:03.442769   70248 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0705 18:21:03.456332   70248 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0705 18:21:03.456489   70248 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0705 18:21:03.470468   70248 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0705 18:21:03.470510   70248 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0705 18:21:03.697806   70248 kubeadm.go:322] [init] Using Kubernetes version: v1.26.3
I0705 18:21:03.697875   70248 kubeadm.go:322] [preflight] Running pre-flight checks
I0705 18:21:04.228986   70248 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0705 18:21:04.229130   70248 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0705 18:21:04.229280   70248 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0705 18:21:04.462846   70248 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0705 18:21:04.491494   70248 out.go:204]     ▪ Generating certificates and keys ...
I0705 18:21:04.491664   70248 kubeadm.go:322] [certs] Using existing ca certificate authority
I0705 18:21:04.491755   70248 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I0705 18:21:04.944742   70248 kubeadm.go:322] [certs] Generating "apiserver-kubelet-client" certificate and key
I0705 18:21:05.582887   70248 kubeadm.go:322] [certs] Generating "front-proxy-ca" certificate and key
I0705 18:21:06.018914   70248 kubeadm.go:322] [certs] Generating "front-proxy-client" certificate and key
I0705 18:21:06.080265   70248 kubeadm.go:322] [certs] Generating "etcd/ca" certificate and key
I0705 18:21:06.152610   70248 kubeadm.go:322] [certs] Generating "etcd/server" certificate and key
I0705 18:21:06.152747   70248 kubeadm.go:322] [certs] etcd/server serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I0705 18:21:06.370200   70248 kubeadm.go:322] [certs] Generating "etcd/peer" certificate and key
I0705 18:21:06.370339   70248 kubeadm.go:322] [certs] etcd/peer serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I0705 18:21:06.558969   70248 kubeadm.go:322] [certs] Generating "etcd/healthcheck-client" certificate and key
I0705 18:21:06.809693   70248 kubeadm.go:322] [certs] Generating "apiserver-etcd-client" certificate and key
I0705 18:21:06.933322   70248 kubeadm.go:322] [certs] Generating "sa" key and public key
I0705 18:21:06.933444   70248 kubeadm.go:322] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0705 18:21:07.268876   70248 kubeadm.go:322] [kubeconfig] Writing "admin.conf" kubeconfig file
I0705 18:21:07.493269   70248 kubeadm.go:322] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I0705 18:21:07.702759   70248 kubeadm.go:322] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0705 18:21:07.925156   70248 kubeadm.go:322] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I0705 18:21:07.943653   70248 kubeadm.go:322] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I0705 18:21:07.944989   70248 kubeadm.go:322] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I0705 18:21:07.945086   70248 kubeadm.go:322] [kubelet-start] Starting the kubelet
I0705 18:21:08.047340   70248 kubeadm.go:322] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I0705 18:21:08.072294   70248 out.go:204]     ▪ Booting up control plane ...
I0705 18:21:08.072475   70248 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-apiserver"
I0705 18:21:08.072647   70248 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I0705 18:21:08.072809   70248 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-scheduler"
I0705 18:21:08.072959   70248 kubeadm.go:322] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0705 18:21:08.094237   70248 kubeadm.go:322] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
I0705 18:21:17.095012   70248 kubeadm.go:322] [apiclient] All control plane components are healthy after 9.010022 seconds
I0705 18:21:17.095315   70248 kubeadm.go:322] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0705 18:21:17.132086   70248 kubeadm.go:322] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0705 18:21:17.682837   70248 kubeadm.go:322] [upload-certs] Skipping phase. Please see --upload-certs
I0705 18:21:17.683176   70248 kubeadm.go:322] [mark-control-plane] Marking the node minikube as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I0705 18:21:18.203217   70248 kubeadm.go:322] [bootstrap-token] Using token: ef9x8c.m6fgsd1eyjg6ys5b
I0705 18:21:18.215325   70248 out.go:204]     ▪ Configuring RBAC rules ...
I0705 18:21:18.215551   70248 kubeadm.go:322] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I0705 18:21:18.227868   70248 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I0705 18:21:18.242586   70248 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I0705 18:21:18.252409   70248 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I0705 18:21:18.261237   70248 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I0705 18:21:18.270371   70248 kubeadm.go:322] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0705 18:21:18.296985   70248 kubeadm.go:322] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0705 18:21:18.675980   70248 kubeadm.go:322] [addons] Applied essential addon: CoreDNS
I0705 18:21:18.774467   70248 kubeadm.go:322] [addons] Applied essential addon: kube-proxy
I0705 18:21:18.775842   70248 kubeadm.go:322] 
I0705 18:21:18.776053   70248 kubeadm.go:322] Your Kubernetes control-plane has initialized successfully!
I0705 18:21:18.776060   70248 kubeadm.go:322] 
I0705 18:21:18.776172   70248 kubeadm.go:322] To start using your cluster, you need to run the following as a regular user:
I0705 18:21:18.776182   70248 kubeadm.go:322] 
I0705 18:21:18.776235   70248 kubeadm.go:322]   mkdir -p $HOME/.kube
I0705 18:21:18.776342   70248 kubeadm.go:322]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I0705 18:21:18.776473   70248 kubeadm.go:322]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I0705 18:21:18.776480   70248 kubeadm.go:322] 
I0705 18:21:18.776580   70248 kubeadm.go:322] Alternatively, if you are the root user, you can run:
I0705 18:21:18.776585   70248 kubeadm.go:322] 
I0705 18:21:18.776692   70248 kubeadm.go:322]   export KUBECONFIG=/etc/kubernetes/admin.conf
I0705 18:21:18.776697   70248 kubeadm.go:322] 
I0705 18:21:18.776851   70248 kubeadm.go:322] You should now deploy a pod network to the cluster.
I0705 18:21:18.776989   70248 kubeadm.go:322] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I0705 18:21:18.777149   70248 kubeadm.go:322]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I0705 18:21:18.777155   70248 kubeadm.go:322] 
I0705 18:21:18.777318   70248 kubeadm.go:322] You can now join any number of control-plane nodes by copying certificate authorities
I0705 18:21:18.777438   70248 kubeadm.go:322] and service account keys on each node and then running the following as root:
I0705 18:21:18.777443   70248 kubeadm.go:322] 
I0705 18:21:18.777583   70248 kubeadm.go:322]   kubeadm join control-plane.minikube.internal:8443 --token ef9x8c.m6fgsd1eyjg6ys5b \
I0705 18:21:18.777760   70248 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:96ee3ff997833ac3cc9497f944260a700f102b4800ed4530a3b3f6ba6bc5f481 \
I0705 18:21:18.777785   70248 kubeadm.go:322] 	--control-plane 
I0705 18:21:18.777796   70248 kubeadm.go:322] 
I0705 18:21:18.777905   70248 kubeadm.go:322] Then you can join any number of worker nodes by running the following on each as root:
I0705 18:21:18.777912   70248 kubeadm.go:322] 
I0705 18:21:18.778056   70248 kubeadm.go:322] kubeadm join control-plane.minikube.internal:8443 --token ef9x8c.m6fgsd1eyjg6ys5b \
I0705 18:21:18.778233   70248 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:96ee3ff997833ac3cc9497f944260a700f102b4800ed4530a3b3f6ba6bc5f481 
I0705 18:21:18.784805   70248 kubeadm.go:322] W0705 16:21:03.710139    1489 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
I0705 18:21:18.785009   70248 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0705 18:21:18.785103   70248 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0705 18:21:18.785115   70248 cni.go:84] Creating CNI manager for ""
I0705 18:21:18.785125   70248 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0705 18:21:18.817905   70248 out.go:177] 🔗  Configuring bridge CNI (Container Networking Interface) ...
I0705 18:21:18.828134   70248 ssh_runner.go:195] Run: sudo mkdir -p /etc/cni/net.d
I0705 18:21:18.855737   70248 ssh_runner.go:362] scp memory --> /etc/cni/net.d/1-k8s.conflist (457 bytes)
I0705 18:21:18.961942   70248 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0705 18:21:18.962144   70248 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.26.3/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0705 18:21:18.962152   70248 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.26.3/kubectl label nodes minikube.k8s.io/version=v1.30.1 minikube.k8s.io/commit=08896fd1dc362c097c925146c4a0d0dac715ace0 minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2023_07_05T18_21_18_0700 minikube.k8s.io/primary=true --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig
I0705 18:21:20.041135   70248 ssh_runner.go:235] Completed: sudo /var/lib/minikube/binaries/v1.26.3/kubectl label nodes minikube.k8s.io/version=v1.30.1 minikube.k8s.io/commit=08896fd1dc362c097c925146c4a0d0dac715ace0 minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2023_07_05T18_21_18_0700 minikube.k8s.io/primary=true --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig: (1.078936268s)
I0705 18:21:20.041192   70248 ssh_runner.go:235] Completed: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj": (1.079221962s)
I0705 18:21:20.041202   70248 ops.go:34] apiserver oom_adj: -16
I0705 18:21:20.041267   70248 ssh_runner.go:235] Completed: sudo /var/lib/minikube/binaries/v1.26.3/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig: (1.079095796s)
I0705 18:21:20.041280   70248 kubeadm.go:1073] duration metric: took 1.079378999s to wait for elevateKubeSystemPrivileges.
I0705 18:21:20.041289   70248 kubeadm.go:403] StartCluster complete in 16.652854423s
I0705 18:21:20.041311   70248 settings.go:142] acquiring lock: {Name:mk49245422026ae83f45caff543c615271d0693a Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:20.042082   70248 settings.go:150] Updating kubeconfig:  /Users/nicolas.barbarisi/.kube/config
I0705 18:21:20.044187   70248 lock.go:35] WriteFile acquiring /Users/nicolas.barbarisi/.kube/config: {Name:mkc562b465a8bbac29f3d063b12f52d0a0e091fb Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0705 18:21:20.045942   70248 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I0705 18:21:20.046057   70248 addons.go:496] enable addons start: toEnable=map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:true efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false istio:false istio-provisioner:false kong:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false volumesnapshots:false]
I0705 18:21:20.046150   70248 addons.go:66] Setting storage-provisioner=true in profile "minikube"
I0705 18:21:20.046168   70248 addons.go:228] Setting addon storage-provisioner=true in "minikube"
I0705 18:21:20.046167   70248 addons.go:66] Setting default-storageclass=true in profile "minikube"
I0705 18:21:20.046194   70248 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "minikube"
I0705 18:21:20.046222   70248 host.go:66] Checking if "minikube" exists ...
I0705 18:21:20.047020   70248 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.26.3
I0705 18:21:20.047383   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0705 18:21:20.047716   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0705 18:21:20.200759   70248 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.65.2 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.26.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I0705 18:21:20.600610   70248 out.go:177]     ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0705 18:21:20.606394   70248 addons.go:420] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0705 18:21:20.606406   70248 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0705 18:21:20.606634   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:21:20.606814   70248 addons.go:228] Setting addon default-storageclass=true in "minikube"
I0705 18:21:20.606845   70248 host.go:66] Checking if "minikube" exists ...
I0705 18:21:20.609696   70248 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0705 18:21:20.635428   70248 kapi.go:248] "coredns" deployment in "kube-system" namespace and "minikube" context rescaled to 1 replicas
I0705 18:21:20.635471   70248 start.go:223] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}
I0705 18:21:20.639092   70248 out.go:177] 🔎  Verifying Kubernetes components...
I0705 18:21:20.676774   70248 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I0705 18:21:20.944267   70248 addons.go:420] installing /etc/kubernetes/addons/storageclass.yaml
I0705 18:21:20.944280   70248 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0705 18:21:20.944511   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0705 18:21:20.949640   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:21:21.099540   70248 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.26.3/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0705 18:21:21.262020   70248 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:52473 SSHKeyPath:/Users/nicolas.barbarisi/.minikube/machines/minikube/id_rsa Username:docker}
I0705 18:21:21.467201   70248 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.26.3/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0705 18:21:21.665142   70248 ssh_runner.go:235] Completed: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.65.2 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.26.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -": (1.464342215s)
I0705 18:21:21.665171   70248 start.go:916] {"host.minikube.internal": 192.168.65.2} host record injected into CoreDNS's ConfigMap
I0705 18:21:21.665375   70248 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0705 18:21:21.957933   70248 api_server.go:51] waiting for apiserver process to appear ...
I0705 18:21:21.958075   70248 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0705 18:21:22.160711   70248 api_server.go:71] duration metric: took 1.525171365s to wait for apiserver process to appear ...
I0705 18:21:22.160732   70248 api_server.go:87] waiting for apiserver healthz status ...
I0705 18:21:22.160759   70248 api_server.go:252] Checking apiserver healthz at https://127.0.0.1:52472/healthz ...
I0705 18:21:22.170535   70248 out.go:177] 🌟  Enabled addons: storage-provisioner, default-storageclass
I0705 18:21:22.174160   70248 api_server.go:278] https://127.0.0.1:52472/healthz returned 200:
ok
I0705 18:21:22.190768   70248 addons.go:499] enable addons completed in 2.144702343s: enabled=[storage-provisioner default-storageclass]
I0705 18:21:22.195359   70248 api_server.go:140] control plane version: v1.26.3
I0705 18:21:22.195372   70248 api_server.go:130] duration metric: took 34.636125ms to wait for apiserver health ...
I0705 18:21:22.195384   70248 system_pods.go:43] waiting for kube-system pods to appear ...
I0705 18:21:22.206405   70248 system_pods.go:59] 5 kube-system pods found
I0705 18:21:22.206416   70248 system_pods.go:61] "etcd-minikube" [2a6f9505-3a1d-4b63-a950-f38f86697d7a] Pending
I0705 18:21:22.206420   70248 system_pods.go:61] "kube-apiserver-minikube" [4e7de542-d970-46e3-be2f-8827ecc1f173] Running
I0705 18:21:22.206423   70248 system_pods.go:61] "kube-controller-manager-minikube" [6f256c12-b229-4edb-bf9f-aac833eda6cc] Pending
I0705 18:21:22.206426   70248 system_pods.go:61] "kube-scheduler-minikube" [b439368a-413f-483a-ad7c-9590d7903f7a] Pending
I0705 18:21:22.206433   70248 system_pods.go:61] "storage-provisioner" [52298ba6-8483-4e4f-95cc-cb5297bf42de] Pending: PodScheduled:Unschedulable (0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling..)
I0705 18:21:22.206438   70248 system_pods.go:74] duration metric: took 11.04947ms to wait for pod list to return data ...
I0705 18:21:22.206444   70248 kubeadm.go:578] duration metric: took 1.570915629s to wait for : map[apiserver:true system_pods:true] ...
I0705 18:21:22.206456   70248 node_conditions.go:102] verifying NodePressure condition ...
I0705 18:21:22.213237   70248 node_conditions.go:122] node storage ephemeral capacity is 164876052Ki
I0705 18:21:22.213250   70248 node_conditions.go:123] node cpu capacity is 5
I0705 18:21:22.213264   70248 node_conditions.go:105] duration metric: took 6.804855ms to run NodePressure ...
I0705 18:21:22.213272   70248 start.go:228] waiting for startup goroutines ...
I0705 18:21:22.213277   70248 start.go:233] waiting for cluster config update ...
I0705 18:21:22.213292   70248 start.go:242] writing updated cluster config ...
I0705 18:21:22.218136   70248 ssh_runner.go:195] Run: rm -f paused
I0705 18:21:22.467338   70248 start.go:568] kubectl: 1.22.5, cluster: 1.26.3 (minor skew: 4)
I0705 18:21:22.471170   70248 out.go:177] 
W0705 18:21:22.479727   70248 out.go:239] ❗  /usr/local/bin/kubectl is version 1.22.5, which may have incompatibilities with Kubernetes 1.26.3.
I0705 18:21:22.500481   70248 out.go:177]     ▪ Want kubectl v1.26.3? Try 'minikube kubectl -- get pods -A'
I0705 18:21:22.519719   70248 out.go:177] 🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

* 
